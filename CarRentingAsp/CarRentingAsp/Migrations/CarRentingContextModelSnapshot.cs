// <auto-generated />
using System;
using CarRentingAsp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentingAsp.Migrations
{
    [DbContext(typeof(CarRentingContext))]
    partial class CarRentingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentingAsp.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"), 1L, 1);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Billing", b =>
                {
                    b.Property<int>("BillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingId"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillingId");

                    b.HasIndex("BookingId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BillingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DropOff_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DropOff_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("DropOff_Time")
                        .HasColumnType("real");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickUp_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickUp_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PickUp_Time")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"), 1L, 1);

                    b.Property<float?>("Acceleration")
                        .HasColumnType("real");

                    b.Property<int>("Car_CategoryId")
                        .HasColumnType("int");

                    b.Property<float?>("Consumption_Combine")
                        .HasColumnType("real");

                    b.Property<float?>("Consumption_Extra_Urban")
                        .HasColumnType("real");

                    b.Property<float?>("Consumption_Urban")
                        .HasColumnType("real");

                    b.Property<string>("Displacement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fee_Per_Hour")
                        .HasColumnType("int");

                    b.Property<string>("Fuel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fuel_System")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Horsepower")
                        .HasColumnType("int");

                    b.Property<string>("Imagine_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Lenght")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Max_Speed")
                        .HasColumnType("int");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Model_Year")
                        .HasColumnType("int");

                    b.Property<int?>("Price_Day")
                        .HasColumnType("int");

                    b.Property<int?>("Price_Hour")
                        .HasColumnType("int");

                    b.Property<int?>("Price_Month")
                        .HasColumnType("int");

                    b.Property<int?>("Registration_Number")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Torque")
                        .HasColumnType("int");

                    b.Property<string>("Traction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Trunk")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("Car_CategoryId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Car_Category", b =>
                {
                    b.Property<int>("Car_CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Car_CategoryId"), 1L, 1);

                    b.Property<string>("Luggage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Seats")
                        .HasColumnType("int");

                    b.HasKey("Car_CategoryId");

                    b.ToTable("Car_Categories");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<DateTime?>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Driver_License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Employer", b =>
                {
                    b.Property<int>("EmployerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployerId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Program_HourId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployerId");

                    b.HasIndex("Program_HourId");

                    b.HasIndex("SalaryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Program_Hour", b =>
                {
                    b.Property<int>("Program_HourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Program_HourId"), 1L, 1);

                    b.Property<string>("Working_Hour")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Program_HourId");

                    b.ToTable("Program_Hours");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Rents", b =>
                {
                    b.Property<int>("RentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentsId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("RentsId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentss");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Respond", b =>
                {
                    b.Property<int>("RespondId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RespondId"), 1L, 1);

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("RespondId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Responds");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Salary", b =>
                {
                    b.Property<int>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryId"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.HasKey("SalaryId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Answer", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Contact", "Contact")
                        .WithMany("Answers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentingAsp.Models.Employer", "Employer")
                        .WithMany("Answers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Billing", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Booking", "Booking")
                        .WithMany("Billing")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Booking", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Employer", "Employer")
                        .WithMany("Bookings")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Car", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Car_Category", "Car_Category")
                        .WithMany("Cars")
                        .HasForeignKey("Car_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car_Category");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Contact", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Employer", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Program_Hour", "Program_Hour")
                        .WithMany("Employers")
                        .HasForeignKey("Program_HourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentingAsp.Models.Salary", "Salary")
                        .WithMany("Employees")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program_Hour");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Rents", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentingAsp.Models.Car", "Car")
                        .WithMany("Rentss")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentingAsp.Models.Customer", "Customer")
                        .WithMany("Rentss")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Respond", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Employer", "Employer")
                        .WithMany("Responds")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentingAsp.Models.Review", "Review")
                        .WithMany("Responds")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Review", b =>
                {
                    b.HasOne("CarRentingAsp.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Booking", b =>
                {
                    b.Navigation("Billing");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Car", b =>
                {
                    b.Navigation("Rentss");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Car_Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Contact", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Rentss");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Employer", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Bookings");

                    b.Navigation("Responds");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Program_Hour", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Review", b =>
                {
                    b.Navigation("Responds");
                });

            modelBuilder.Entity("CarRentingAsp.Models.Salary", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
